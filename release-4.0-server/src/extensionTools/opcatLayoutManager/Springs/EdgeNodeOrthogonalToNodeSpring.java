package extensionTools.opcatLayoutManager.Springs;

import java.text.MessageFormat;
import extensionTools.opcatLayoutManager.*;
import extensionTools.opcatLayoutManager.Constraints.Constraint;

/**
 * Represents a spring connecting an edge node with other node.
 * The force is applied only to the edge node and is equal in value
 * and apposite in direction to the force, generated by a given spring.
 * The given spring is "mirrored" by this spring.
 * Applying a force to an edge is accomplished by applying half the force to each
 * of the two nodes at the edge endpoints.
 */
public class EdgeNodeOrthogonalToNodeSpring extends SingleNodeSpring
{
    /**
     * Initializes an instance of the class.
     *
     * @param constraint     Specifies the constraint, that creates this spring.
     * @param nodeConnection Specifies the node connection point for this spring.
     * @param buddySpring    Specifies the spring to "mirror".
     */
    public EdgeNodeOrthogonalToNodeSpring( Constraint                 constraint,
                                           SpringConnectionPoint      nodeConnection,
                                           NodeOrthogonalToEdgeSpring buddySpring)
    {
        super(constraint, buddySpring.GetSpringRestLength(), nodeConnection);
        this.m_buddySpring = buddySpring;
    }

    /**
     * Returns a string representation of the object.
     * @see java.lang.Object#toString()
     *
     * @return a string representation of the object
     */
    public String toString()
    {
        return MessageFormat.format( "[{0} (opposite to {1}) by constraint {2}]",
                                     new Object[] {this.m_nodeConnection.m_node, this.m_buddySpring, this.m_constraint});
    }

    /**
     * Refer to {@linkplain extensionTools.opcatLayoutManager.Springs.Spring#GetSpringConstant() the overridden method}.
     */
    public double GetSpringConstant()
    {
        return 0.5 * this.m_buddySpring.GetSpringConstant();
    }

    /**
     * Refer to {@linkplain extensionTools.opcatLayoutManager.Springs.SingleNodeSpring#InternalGetForce(NodeContext) the overridden method}.
     */
    protected Vector2D InternalGetForce(NodeContext node)
    {
        //
        // The force on the edge node is half and reverse to the force on the node.
        //
        //                          -0.5F +-----+
        //                            --->|     |
        //                                +--+--+
        //                                   |
        //            +----------+   F       |
        //            |          |<------    |
        //            +----------+           |
        //                                   |
        //                                   |
        //                                +--+--+
        //                            --->|     |
        //                          -0.5F +-----+
        //
        return this.m_buddySpring.GetForce(null).Multiply(-0.5);
    }

    private NodeOrthogonalToEdgeSpring m_buddySpring;
}
